const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');

// Dados persistentes
const DATA_FILE = 'naruto_rpg_data.json';

// Carrega dados salvos
let gameData = {
    jogadores: {},
    rankings: {
        nivel: [],
        ryo: [],
        missoes: []
    },
    loja: {
        itens: [
            { id: 1, nome: "Kunai", preco: 50, tipo: "arma", dano: 10 },
            { id: 2, nome: "Shuriken", preco: 30, tipo: "arma", dano: 5 },
            { id: 3, nome: "Explosive Tag", preco: 100, tipo: "consumivel", efeito: "dano_area" },
            { id: 4, nome: "Soldier Pill", preco: 150, tipo: "consumivel", efeito: "restaura_chakra" },
            { id: 5, nome: "Forehead Protector", preco: 200, tipo: "defesa", defesa: 15 }
        ]
    },
    eventosAtivos: []
};

// Tenta carregar dados salvos
if (fs.existsSync(DATA_FILE)) {
    gameData = JSON.parse(fs.readFileSync(DATA_FILE, 'utf-8'));
}

// Vilas e cl√£s
const vilas = {
    "folha": { nome: "Konoha", bonus: "chakra" },
    "areia": { nome: "Sunagakure", bonus: "resistencia" },
    "n√©voa": { nome: "Kirigakure", bonus: "furtividade" },
    "pedra": { nome: "Iwagakure", bonus: "defesa" },
    "nuvem": { nome: "Kumogakure", bonus: "velocidade" }
};

const clas = {
    "uchiha": { nome: "Uchiha", bonus: "sharingan" },
    "hyuga": { nome: "Hyuga", bonus: "byakugan" },
    "uzumaki": { nome: "Uzumaki", bonus: "chakra" },
    "nara": { nome: "Nara", bonus: "inteligencia" },
    "akimichi": { nome: "Akimichi", bonus: "forca" }
};

// Jutsus e habilidades
const jutsus = {
    "Uchiha": [
        { nome: "Sharingan", dano: 0, efeito: "previsao", chakra: 20 },
        { nome: "Amaterasu", dano: 60, chakra: 50 },
        { nome: "Tsukuyomi", dano: 40, efeito: "confusao", chakra: 45 },
        { nome: "Susanoo", dano: 0, defesa: 30, chakra: 70 }
    ],
    "Hyuga": [
        { nome: "Byakugan", dano: 0, efeito: "visao_360", chakra: 15 },
        { nome: "J≈´ken", dano: 25, efeito: "bloqueio_chakra", chakra: 30 },
        { nome: "Kaiten", dano: 0, defesa: 25, chakra: 35 }
    ],
    "Uzumaki": [
        { nome: "F≈´injutsu", dano: 20, efeito: "selamento", chakra: 40 },
        { nome: "Chains of Adamantine", dano: 15, efeito: "imobilizar", chakra: 30 }
    ],
    "Nara": [
        { nome: "Kagemane no Jutsu", dano: 0, efeito: "imobilizar", chakra: 35 },
        { nome: "Kage Nui", dano: 20, chakra: 25 }
    ],
    "Akimichi": [
        { nome: "Baika no Jutsu", dano: 30, chakra: 40 },
        { nome: "Nikudan Sensha", dano: 45, chakra: 60 }
    ]
};

// Missoes
const missoes = [
    { id: 1, nome: "Miss√£o Rank D: Entrega de Mensagem", exp: 50, ryo: 100, dificuldade: 1 },
    { id: 2, nome: "Miss√£o Rank C: Capturar Animal Selvagem", exp: 100, ryo: 200, dificuldade: 2 },
    { id: 3, nome: "Miss√£o Rank B: Proteger o Comerciante", exp: 200, ryo: 400, dificuldade: 3 },
    { id: 4, nome: "Miss√£o Rank A: Capturar Ninja Renegado", exp: 400, ryo: 800, dificuldade: 4 },
    { id: 5, nome: "Miss√£o Rank S: Derrotar um Akatsuki", exp: 800, ryo: 1600, dificuldade: 5 }
];

// Inicializa o cliente do WhatsApp
const client = new Client({
    authStrategy: new LocalAuth()
});

// Gera QR Code para login
client.on('qr', qr => {
    qrcode.generate(qr, {small: true});
});

// Confirma√ß√£o de login
client.on('ready', () => {
    console.log('Bot de Naruto RPG Avan√ßado est√° pronto!');
    iniciarEventos();
});

// Salva dados periodicamente
setInterval(salvarDados, 300000); // A cada 5 minutos

// Fun√ß√£o para salvar dados
function salvarDados() {
    fs.writeFileSync(DATA_FILE, JSON.stringify(gameData, null, 2));
    console.log('Dados do jogo salvos.');
}

// Fun√ß√£o para iniciar eventos aleat√≥rios
function iniciarEventos() {
    setInterval(() => {
        const eventos = [
            "Invas√£o de Konoha",
            "Exame Chunin",
            "Ca√ßa √† Bijuu",
            "Miss√£o Especial do Hokage"
        ];
        
        const evento = eventos[Math.floor(Math.random() * eventos.length)];
        gameData.eventosAtivos.push(evento);
        
        // Notifica todos os jogadores
        Object.keys(gameData.jogadores).forEach(jogadorId => {
            client.sendMessage(jogadorId, `üåã *EVENTO ESPECIAL DISPON√çVEL!* üåã\n\n${evento}\n\nUse !evento para participar!`);
        });
        
        // Remove o evento ap√≥s 30 minutos
        setTimeout(() => {
            gameData.eventosAtivos = gameData.eventosAtivos.filter(e => e !== evento);
        }, 1800000);
    }, 3600000); // A cada hora
}

// Fun√ß√£o para calcular atributos baseados no n√≠vel
function calcularAtributos(nivel) {
    return {
        vida: 80 + (nivel * 20),
        chakra: 50 + (nivel * 15),
        ataque: 10 + (nivel * 3),
        defesa: 5 + (nivel * 2)
    };
}

// Fun√ß√£o para atualizar rankings
function atualizarRankings() {
    const jogadoresArray = Object.values(gameData.jogadores);
    
    gameData.rankings.nivel = [...jogadoresArray]
        .sort((a, b) => b.nivel - a.nivel)
        .slice(0, 10);
    
    gameData.rankings.ryo = [...jogadoresArray]
        .sort((a, b) => b.ryo - a.ryo)
        .slice(0, 10);
    
    gameData.rankings.missoes = [...jogadoresArray]
        .sort((a, b) => b.missoesCompletas.length - a.missoesCompletas.length)
        .slice(0, 10);
}

// Fun√ß√£o para batalha PvP
async function batalhaPvP(msg, jogadorId, alvoId) {
    const jogador = gameData.jogadores[jogadorId];
    const alvo = gameData.jogadores[alvoId];
    
    if (!alvo) {
        msg.reply("Jogador alvo n√£o encontrado.");
        return;
    }
    
    if (jogadorId === alvoId) {
        msg.reply("Voc√™ n√£o pode batalhar contra si mesmo!");
        return;
    }
    
    // Verifica se o alvo est√° em batalha
    if (alvo.emBatalha) {
        msg.reply("Este jogador j√° est√° em uma batalha no momento.");
        return;
    }
    
    // Configura estado de batalha
    jogador.emBatalha = true;
    alvo.emBatalha = true;
    
    // Atributos dos combatentes
    const attJogador = calcularAtributos(jogador.nivel);
    const attAlvo = calcularAtributos(alvo.nivel);
    
    // Aplica b√¥nus de vila e cl√£
    aplicarBonus(jogador, attJogador);
    aplicarBonus(alvo, attAlvo);
    
    // Inicia batalha
    let resultado = `‚öîÔ∏è *Batalha entre ${jogador.nome} (N√≠vel ${jogador.nivel}) vs ${alvo.nome} (N√≠vel ${alvo.nivel})* ‚öîÔ∏è\n\n`;
    
    // Turnos de batalha (simplificado)
    let vitorioso = null;
    let perdedor = null;
    
    for (let turno = 1; turno <= 3; turno++) {
        resultado += `*Turno ${turno}:*\n`;
        
        // Jogador ataca
        const danoJogador = Math.max(1, attJogador.ataque - attAlvo.defesa / 2);
        resultado += `- ${jogador.nome} usa ${jogador.jutsus[0].nome} e causa ${danoJogador} de dano!\n`;
        attAlvo.vida -= danoJogador;
        
        if (attAlvo.vida <= 0) {
            vitorioso = jogador;
            perdedor = alvo;
            break;
        }
        
        // Alvo ataca
        const danoAlvo = Math.max(1, attAlvo.ataque - attJogador.defesa / 2);
        resultado += `- ${alvo.nome} usa ${alvo.jutsus[0].nome} e causa ${danoAlvo} de dano!\n`;
        attJogador.vida -= danoAlvo;
        
        if (attJogador.vida <= 0) {
            vitorioso = alvo;
            perdedor = jogador;
            break;
        }
        
        resultado += `\nVida restante:\n${jogador.nome}: ${Math.max(0, attJogador.vida)}\n${alvo.nome}: ${Math.max(0, attAlvo.vida)}\n\n`;
    }
    
    // Determina vencedor se n√£o houve decis√£o nos turnos
    if (!vitorioso) {
        if (attJogador.vida > attAlvo.vida) {
            vitorioso = jogador;
            perdedor = alvo;
        } else {
            vitorioso = alvo;
            perdedor = jogador;
        }
    }
    
    // Resultado final
    resultado += `\nüèÜ *${vitorioso.nome} venceu a batalha!* üèÜ\n\n`;
    
    // Recompensas
    const expGanho = perdedor.nivel * 20;
    const ryoGanho = perdedor.nivel * 50;
    
    vitorioso.exp += expGanho;
    vitorioso.ryo += ryoGanho;
    vitorioso.vitorias = (vitorioso.vitorias || 0) + 1;
    
    perdedor.derrotas = (perdedor.derrotas || 0) + 1;
    
    resultado += `Recompensas:\n`;
    resultado += `- ${vitorioso.nome} ganhou ${expGanho} EXP e ${ryoGanho} Ry≈ç\n`;
    
    // Verifica subida de n√≠vel
    const expNecessario = vitorioso.nivel * 100;
    if (vitorioso.exp >= expNecessario) {
        vitorioso.nivel += 1;
        vitorioso.exp = 0;
        
        // Aprende novo jutsu se dispon√≠vel
        const jutsusCla = jutsus[vitorioso.cla.nome];
        if (jutsusCla && vitorioso.jutsus.length < jutsusCla.length) {
            const novoJutsu = jutsusCla[vitorioso.jutsus.length];
            vitorioso.jutsus.push(novoJutsu);
            resultado += `\nüéâ ${vitorioso.nome} subiu para o n√≠vel ${vitorioso.nivel} e aprendeu o jutsu ${novoJutsu.nome}!`;
        } else {
            resultado += `\nüéâ ${vitorioso.nome} subiu para o n√≠vel ${vitorioso.nivel}!`;
        }
    }
    
    // Libera jogadores da batalha
    jogador.emBatalha = false;
    alvo.emBatalha = false;
    
    // Atualiza rankings
    atualizarRankings();
    
    // Envia resultado para ambos os jogadores
    msg.reply(resultado);
    client.sendMessage(alvoId, resultado);
}

// Aplica b√¥nus de vila e cl√£
function aplicarBonus(jogador, atributos) {
    // B√¥nus da vila
    switch (jogador.vila.bonus) {
        case "chakra":
            atributos.chakra += 20;
            break;
        case "resistencia":
            atributos.vida += 30;
            break;
        case "furtividade":
            atributos.ataque += 5; // Ataque furtivo
            break;
        case "defesa":
            atributos.defesa += 10;
            break;
        case "velocidade":
            atributos.ataque += 8; // Ataque primeiro
            break;
    }
    
    // B√¥nus do cl√£
    switch (jogador.cla.bonus) {
        case "sharingan":
            atributos.ataque += 15; // Melhor precis√£o
            break;
        case "byakugan":
            atributos.defesa += 10; // Vis√£o de 360¬∞
            break;
        case "chakra":
            atributos.chakra += 30;
            break;
        case "inteligencia":
            atributos.ataque += 5;
            atributos.defesa += 5;
            break;
        case "forca":
            atributos.ataque += 20;
            break;
    }
}

// Lida com mensagens recebidas
client.on('message', async msg => {
    const texto = msg.body.toLowerCase();
    const remetente = msg.from;
    
    // Comando para iniciar o jogo
    if (texto === '!iniciar') {
        if (!gameData.jogadores[remetente]) {
            let resposta = "üåü *Bem-vindo ao Mundo Shinobi!* üåü\n\n";
            resposta += "Para criar seu personagem, responda com:\n";
            resposta += "!criar [nome] [vila] [cl√£]\n\n";
            resposta += "*Vilas dispon√≠veis:* folha, areia, n√©voa, pedra, nuvem\n";
            resposta += "*Cl√£s dispon√≠veis:* " + Object.keys(clas).join(", ");
            
            msg.reply(resposta);
        } else {
            msg.reply("Voc√™ j√° tem um personagem criado! Use !status para ver seus dados.");
        }
    }
    
    // Comando para criar personagem
    else if (texto.startsWith('!criar')) {
        if (gameData.jogadores[remetente]) {
            msg.reply("Voc√™ j√° tem um personagem criado!");
            return;
        }
        
        const partes = texto.split(' ');
        if (partes.length < 4) {
            msg.reply("Formato incorreto. Use: !criar [nome] [vila] [cl√£]");
            return;
        }
        
        const nome = partes[1];
        const vilaInput = partes[2];
        const claInput = partes[3];
        
        const vila = vilas[vilaInput];
        const cla = clas[claInput];
        
        if (!vila || !cla) {
            msg.reply("Vila ou cl√£ inv√°lido. Use !iniciar para ver as op√ß√µes.");
            return;
        }
        
        // Cria novo jogador
        gameData.jogadores[remetente] = {
            nome: nome,
            vila: vila,
            cla: cla,
            nivel: 1,
            exp: 0,
            ryo: 100,
            jutsus: jutsus[cla.nome] ? [jutsus[cla.nome][0]] : [{ nome: "Bunshin no Jutsu", dano: 5, chakra: 10 }],
            missoesCompletas: [],
            inventario: [],
            vitorias: 0,
            derrotas: 0
        };
        
        let resposta = `üéâ *Personagem criado com sucesso!* üéâ\n\n`;
        resposta += `*Nome:* ${nome}\n`;
        resposta += `*Vila:* ${vila.nome} (B√¥nus: ${vila.bonus})\n`;
        resposta += `*Cl√£:* ${cla.nome} (B√¥nus: ${cla.bonus})\n`;
        resposta += `*Jutsu inicial:* ${gameData.jogadores[remetente].jutsus[0].nome}\n\n`;
        resposta += `Use !status para ver seus dados ou !missoes para ver miss√µes dispon√≠veis.`;
        
        msg.reply(resposta);
        salvarDados();
    }
    
    // Comando para ver status
    else if (texto === '!status') {
        const jogador = gameData.jogadores[remetente];
        if (!jogador) {
            msg.reply("Voc√™ ainda n√£o criou um personagem. Use !iniciar para come√ßar.");
            return;
        }
        
        const atributos = calcularAtributos(jogador.nivel);
        aplicarBonus(jogador, atributos);
        
        let resposta = `*Ficha de ${jogador.nome}*\n\n`;
        resposta += `*Vila:* ${jogador.vila.nome}\n`;
        resposta += `*Cl√£:* ${jogador.cla.nome}\n`;
        resposta += `*N√≠vel:* ${jogador.nivel}\n`;
        resposta += `*EXP:* ${jogador.exp}/${jogador.nivel * 100}\n`;
        resposta += `*Ry≈ç:* ${jogador.ryo}\n`;
        resposta += `*Vit√≥rias:* ${jogador.vitorias || 0}\n`;
        resposta += `*Derrotas:* ${jogador.derrotas || 0}\n\n`;
        resposta += `*Atributos:*\n`;
        resposta += `- Vida: ${atributos.vida}\n`;
        resposta += `- Chakra: ${atributos.chakra}\n`;
        resposta += `- Ataque: ${atributos.ataque}\n`;
        resposta += `- Defesa: ${atributos.defesa}\n\n`;
        resposta += `*Jutsus:* ${jogador.jutsus.map(j => j.nome).join(", ")}\n`;
        resposta += `*Miss√µes completas:* ${jogador.missoesCompletas.length}\n`;
        resposta += `*Itens no invent√°rio:* ${jogador.inventario.length}`;
        
        msg.reply(resposta);
    }
    
    // Comando para listar miss√µes
    else if (texto === '!missoes') {
        const jogador = gameData.jogadores[remetente];
        if (!jogador) {
            msg.reply("Voc√™ ainda n√£o criou um personagem. Use !iniciar para come√ßar.");
            return;
        }
        
        let resposta = "*Miss√µes Dispon√≠veis:*\n\n";
        missoes.forEach(missao => {
            resposta += `*${missao.id}.* ${missao.nome}\n`;
            resposta += `Dificuldade: ${'‚òÖ'.repeat(missao.dificuldade)}\n`;
            resposta += `Recompensa: ${missao.exp} EXP | ${missao.ryo} Ry≈ç\n\n`;
        });
        resposta += "Para aceitar uma miss√£o, use !aceitar [n√∫mero]";
        
        msg.reply(resposta);
    }
    
    // Comando para aceitar miss√£o
    else if (texto.startsWith('!aceitar')) {
        const jogador = gameData.jogadores[remetente];
        if (!jogador) {
            msg.reply("Voc√™ ainda n√£o criou um personagem. Use !iniciar para come√ßar.");
            return;
        }
        
        const numeroMissao = parseInt(texto.split(' ')[1]);
        const missao = missoes.find(m => m.id === numeroMissao);
        
        if (!missao) {
            msg.reply("N√∫mero de miss√£o inv√°lido. Use !missoes para ver as op√ß√µes.");
            return;
        }
        
        // Simula completar a miss√£o
        jogador.exp += missao.exp;
        jogador.ryo += missao.ryo;
        jogador.missoesCompletas.push(missao.nome);
        
        // Verifica se subiu de n√≠vel
        const expNecessario = jogador.nivel * 100;
        if (jogador.exp >= expNecessario) {
            jogador.nivel += 1;
            jogador.exp = 0;
            
            // Aprende novo jutsu se dispon√≠vel
            const jutsusCla = jutsus[jogador.cla.nome];
            if (jutsusCla && jogador.jutsus.length < jutsusCla.length) {
                const novoJutsu = jutsusCla[jogador.jutsus.length];
                jogador.jutsus.push(novoJutsu);
                msg.reply(`üéâ *Parab√©ns!* Voc√™ subiu para o n√≠vel ${jogador.nivel} e aprendeu o jutsu ${novoJutsu.nome}!`);
            } else {
                msg.reply(`üéâ *Parab√©ns!* Voc√™ subiu para o n√≠vel ${jogador.nivel}!`);
            }
        } else {
            msg.reply(`‚úÖ Miss√£o "${missao.nome}" completada!\nVoc√™ ganhou ${missao.exp} EXP e ${missao.ryo} Ry≈ç.`);
        }
        
        salvarDados();
        atualizarRankings();
    }
    
    // Comando para ver loja
    else if (texto === '!loja') {
        let resposta = "*Loja Shinobi* - Use !comprar [n√∫mero] para adquirir itens\n\n";
        gameData.loja.itens.forEach(item => {
            resposta += `*${item.id}.* ${item.nome} - ${item.ryo} Ry≈ç\n`;
            resposta += `Tipo: ${item.tipo}`;
            if (item.dano) resposta += ` | Dano: +${item.dano}`;
            if (item.defesa) resposta += ` | Defesa: +${item.defesa}`;
            resposta += `\n\n`;
        });
        
        msg.reply(resposta);
    }
    
    // Comando para comprar itens
    else if (texto.startsWith('!comprar')) {
        const jogador = gameData.jogadores[remetente];
        if (!jogador) {
            msg.reply("Voc√™ ainda n√£o criou um personagem. Use !iniciar para come√ßar.");
            return;
        }
        
        const numeroItem = parseInt(texto.split(' ')[1]);
        const item = gameData.loja.itens.find(i => i.id === numeroItem);
        
        if (!item) {
            msg.reply("N√∫mero de item inv√°lido. Use !loja para ver os itens dispon√≠veis.");
            return;
        }
        
        if (jogador.ryo < item.preco) {
            msg.reply(`Voc√™ n√£o tem Ry≈ç suficiente para comprar ${item.nome}. Voc√™ precisa de mais ${item.preco - jogador.ryo} Ry≈ç.`);
            return;
        }
        
        jogador.ryo -= item.preco;
        jogador.inventario.push(item);
        
        msg.reply(`‚úÖ Voc√™ comprou ${item.nome} por ${item.preco} Ry≈ç!\nUse !inventario para ver seus itens.`);
        salvarDados();
    }
    
    // Comando para ver invent√°rio
    else if (texto === '!inventario') {
        const jogador = gameData.jogadores[remetente];
        if (!jogador) {
            msg.reply("Voc√™ ainda n√£o criou um personagem. Use !iniciar para come√ßar.");
            return;
        }
        
        if (jogador.inventario.length === 0) {
            msg.reply("Seu invent√°rio est√° vazio. Visite a !loja para comprar itens.");
            return;
        }
        
        let resposta = `*Invent√°rio de ${jogador.nome}*\n\n`;
        jogador.inventario.forEach((item, index) => {
            resposta += `*${index + 1}.* ${item.nome}\n`;
            resposta += `Tipo: ${item.tipo}`;
            if (item.dano) resposta += ` | Dano: +${item.dano}`;
            if (item.defesa) resposta += ` | Defesa: +${item.defesa}`;
            resposta += `\n\n`;
        });
        
        msg.reply(resposta);
    }
    
    // Comando para ver rankings
    else if (texto === '!ranking') {
        let resposta = "*Rankings Shinobi*\n\n";
        
        resposta += "*Top 10 por N√≠vel:*\n";
        gameData.rankings.nivel.forEach((jogador, index) => {
            resposta += `${index + 1}. ${jogador.nome} - N√≠vel ${jogador.nivel}\n`;
        });
        
        resposta += "\n*Top 10 por Ry≈ç:*\n";
        gameData.rankings.ryo.forEach((jogador, index) => {
            resposta += `${index + 1}. ${jogador.nome} - ${jogador.ryo} Ry≈ç\n`;
        });
        
        resposta += "\n*Top 10 por Miss√µes Completas:*\n";
        gameData.rankings.missoes.forEach((jogador, index) => {
            resposta += `${index + 1}. ${jogador.nome} - ${jogador.missoesCompletas.length} miss√µes\n`;
        });
        
        msg.reply(resposta);
    }
    
    // Comando para batalhar contra outro jogador
    else if (texto.startsWith('!batalhar')) {
        const jogador = gameData.jogadores[remetente];
        if (!jogador) {
            msg.reply("Voc√™ ainda n√£o criou um personagem. Use !iniciar para come√ßar.");
            return;
        }
        
        if (jogador.emBatalha) {
            msg.reply("Voc√™ j√° est√° em uma batalha no momento.");
            return;
        }
        
        const alvoId = texto.split(' ')[1]; // N√∫mero de telefone ou @ do jogador alvo
        if (!alvoId) {
            msg.reply("Formato incorreto. Use: !batalhar [@n√∫mero_do_jogador]");
            return;
        }
        
        batalhaPvP(msg, remetente, alvoId.includes('@') ? alvoId : alvoId + '@c.us');
    }
    
    // Comando para participar de eventos
    else if (texto === '!evento') {
        const jogador = gameData.jogadores[remetente];
        if (!jogador) {
            msg.reply("Voc√™ ainda n√£o criou um personagem. Use !iniciar para come√ßar.");
            return;
        }
        
        if (gameData.eventosAtivos.length === 0) {
            msg.reply("N√£o h√° eventos ativos no momento. Fique atento para pr√≥ximos eventos!");
            return;
        }
        
        const evento = gameData.eventosAtivos[0];
        let recompensaExp = 0;
        let recompensaRyo = 0;
        
        // Determina recompensas baseadas no n√≠vel
        switch(evento) {
            case "Invas√£o de Konoha":
                recompensaExp = jogador.nivel * 150;
                recompensaRyo = jogador.nivel * 300;
                break;
            case "Exame Chunin":
                recompensaExp = jogador.nivel * 120;
                recompensaRyo = jogador.nivel * 250;
                break;
            case "Ca√ßa √† Bijuu":
                recompensaExp = jogador.nivel * 200;
                recompensaRyo = jogador.nivel * 500;
                break;
            case "Miss√£o Especial do Hokage":
                recompensaExp = jogador.nivel * 180;
                recompensaRyo = jogador.nivel * 400;
                break;
        }
        
        // Adiciona recompensas
        jogador.exp += recompensaExp;
        jogador.ryo += recompensaRyo;
        
        // Chance de item raro
        if (Math.random() < 0.3) {
            const itensRaros = [
                { nome: "Scroll de Forbidden Jutsu", tipo: "especial", valor: 1000 },
                { nome: "Chakra Blade", tipo: "arma", dano: 30 },
                { nome: "Armadura de Chakra", tipo: "defesa", defesa: 40 }
            ];
            
            const itemRaro = itensRaros[Math.floor(Math.random() * itensRaros.length)];
            jogador.inventario.push(itemRaro);
            
            msg.reply(`üéâ *Voc√™ participou do evento ${evento} e ganhou ${recompensaExp} EXP, ${recompensaRyo} Ry≈ç e um item raro: ${itemRaro.nome}!*`);
        } else {
            msg.reply(`üéâ *Voc√™ participou do evento ${evento} e ganhou ${recompensaExp} EXP e ${recompensaRyo} Ry≈ç!*`);
        }
        
        // Verifica subida de n√≠vel
        const expNecessario = jogador.nivel * 100;
        if (jogador.exp >= expNecessario) {
            jogador.nivel += 1;
            jogador.exp = 0;
            msg.reply(`\nüéâ *Parab√©ns!* Voc√™ subiu para o n√≠vel ${jogador.nivel}!`);
        }
        
        salvarDados();
        atualizarRankings();
    }
    
    // Comando de ajuda
    else if (texto === '!ajuda') {
        let resposta = "*Comandos do Naruto RPG Bot:*\n\n";
        resposta += "!iniciar - Come√ßa o jogo\n";
        resposta += "!criar [nome] [vila] [cl√£] - Cria seu personagem\n";
        resposta += "!status - Mostra seus dados\n";
        resposta += "!missoes - Lista miss√µes dispon√≠veis\n";
        resposta += "!aceitar [n√∫mero] - Aceita uma miss√£o\n";
        resposta += "!loja - Mostra itens dispon√≠veis para compra\n";
        resposta += "!comprar [n√∫mero] - Compra um item da loja\n";
        resposta += "!inventario - Mostra seus itens\n";
        resposta += "!ranking - Mostra os rankings\n";
        resposta += "!batalhar [@jogador] - Desafia outro jogador para uma batalha\n";
        resposta += "!evento - Participa do evento ativo\n";
        resposta += "!ajuda - Mostra esta mensagem";
        
        msg.reply(resposta);
    }
});

// Inicia o cliente
client.initialize();
